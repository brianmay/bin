#!/bin/sh -e

open_window() {
    local THEME
    local TITLE

    THEME="$1"; shift;
    TITLE="$1"; shift;

    if [ "$TERM" = "screen" ]
    then
        screen -t "$TITLE" "$@"
        exit 0
    elif [ -n "$DISPLAY" ]
    then
        if [ -n "$*" ]
        then
            exec rxvt -name "$THEME" -title "$TITLE" -e "showerror" "$@"
        else
            exec rxvt -name "$THEME" -title "$TITLE"
        fi
    else
        echo "Cannot find method to open new window" >&2
        exit 1
    fi
    exit 1
}

open_sudo_window() {
    local THEME
    local RUSER

    THEME="$1"; shift;
    RUSER="$1"; shift;

    if [ "$RUSER" = "root" ]
    then
        THEME="$THEME"_"$RUSER"
    fi

    TITLE="$RUSER@localhost"

    if [ -n "$*" ]
    then
        open_window "$THEME" "$TITLE" sudo -u "$RUSER" "$@"
        exit 1
    else
        open_window "$THEME" "$TITLE" sudo -u "$RUSER" -s
        exit 1
    fi
}

exec_localhost() {
    local THEME
    local RUSER
    local HOST

    THEME="$1"; shift;
    RUSER="$1"; shift;
    HOST="$1"; shift;

    if [ "$HOST" != "localhost" ]
    then
        echo "Cannot user localhost method for host '$HOST'" >&2
        exit 1
    fi

    if [ "$RUSER" != "$USER" ]
    then
        open_sudo_window "$THEME" "$RUSER"
        exit 1
    else
        open_window "$THEME" "$HOST"
        exit 1
    fi
}

exec_ssh() {
    local THEME
    local RUSER
    local HOST

    THEME="$1"; shift;
    RUSER="$1"; shift;
    HOST="$1"; shift;

    if [ "$RUSER" = "root" ]
    then
        THEME="$THEME"_"$RUSER"
    fi

    if [ -n "$RUSER" ]
    then
        TITLE="$RUSER@$HOST"
        open_window "$THEME" "$TITLE" ssh -t $_X $RUSER@$HOST "$*"
    else
        TITLE="$HOST"
        open_window "$THEME" "$TITLE" ssh -t $_X $HOST "$*"
    fi
}

exec_rdesktop() {
    local THEME
    local RUSER
    local HOST

    THEME="$1"; shift;
    RUSER="$1"; shift;
    HOST="$1"; shift;

    if [ -n "$DISPLAY" ] && pidof ratpoison
    then
        frame="$(ratpoison -c curframe)"
        g="$(ratpoison -c sfdump | sed -n 's/.*(frame :number '"$frame"' \([^\(\)]*\)).*/\1/p' | sed -n 's/[^)]*:width \([0-9]\+\) :height \([0-9]\+\).*/\1x\2/p')"
        rdesktop -K -g "$g" -u "$RUSER" "$HOST"
    elif [ -n "$DISPLAY" ]
    then
        g="`xwininfo -root | sed -n 's/ *-geometry *//p'`"
        rdesktop -K -g "$g" -u "$RUSER" "$HOST"
    else
        echo "Need X windows for rdesktop" >&2
        exit 1
    fi
}


main() {
    local _TEMP

    _TEMP=`getopt -o '' --long root,X -n'login' -- "$@"`

    if [ $? != 0 ]
    then
            echo "Terminating..." 1>&2
            exit 1
    fi

    eval set -- "$_TEMP"

    local username
    local protocol
    local _X

    username=""
    protocol=""
    _X=""

    while true
    do
        case "$1" in
        --root)
            shift
            username="root"
            ;;
        --X)
            shift
            _X="-X"
            ;;
        --)
            shift;
            break;
            ;;
        *)
            echo "Internal error ($1)." 1>&2;
            exit 1;
            ;;
        esac
    done

    if [ -z "$1" ]
    then
        echo "Host name not given" >&2
        exit 1
    fi

    local A
    local B
    local host

    A="`echo "$1" | sed -n 's/\(.*\)@\(.*\)/\1/p'`"
    B="`echo "$1" | sed -n 's/\(.*\)@\(.*\)/\2/p'`"

    if [ -n "$A" ] && [ -n "$B" ]]
    then
            username="$A"
            host="$B"
    else
            host="$1"
    fi

    shift

    local host_entry
    local host_domain
    local host_username
    local host_protocol
    local host_match

    host_entry="`grep "^$host:" "$HOME/.openwin.hosts" || true`"
    if [ -n "$host_entry" ]
    then
            host_domain="`echo "$host_entry" | awk -F: '{print $2}'`"
            host_username="`echo "$host_entry" | awk -F: '{print $3}'`"
            host_protocol="`echo "$host_entry" | awk -F: '{print $4}'`"
            host_match=1
    else
            host_domain=""
            host_username=""
            host_protocol=""
            host_match=0
    fi

    if [ -n "$username" ]
    then
        username="$username"
    elif [ -n "$host_username" ]
    then
        username="$host_username"
    else
        username="$USER"
    fi

    if [ -n "$protocol" ]
    then
        protocol="$protocol"
    elif [ -n "$host_protocol" ]
    then
        protocol="$host_protocol"
    else
        protocol="ssh"
    fi

    local domain_match
    local domain_name
    local domain_theme
    local domain_host

    domain_match=0
    while [ "$domain_match" -eq 0 ] && read i
    do
        if [ -n "$domain_name" ]
        then
            domain_host="$host.$domain_name"
        else
            domain_host="$host"
        fi
        domain_name="`echo "$i" | awk -F: '{ print $1 }'`"
        domain_theme="`echo "$i" | awk -F: '{ print $2 }'`"

        if [ "$host_match" -gt 0 ]
        then
            if [ "$host_domain" = "$domain_name" ]
            then
                domain_match=1
            fi
        else
            if getent hosts "$domain_host" > /dev/null
            then
                domain_match=1
            fi
        fi
    done < "$HOME/.openwin.domains"

    if [ "$domain_match" -gt 0 ]
    then
        if [ "$protocol" = "localhost" ]
        then
                exec_localhost "$domain_theme" "$username" "$domain_host"
        elif [ "$protocol" = "ssh" ]
        then
                exec_ssh "$domain_theme" "$username" "$domain_host"
                exit 1
        elif [ "$protocol" = "rdesktop" ]
        then
                exec_rdesktop "$domain_theme" "$username" "$domain_host"
                exit 1
        else
                echo "Unknown protocol '$protocol'" >&2
                exit 1
        fi
    else
        if [ "$host_match" -gt 0 ]
        then
            echo "Cannot find domain '$host_domain'" >&2
            exit 1
        else
            echo "Cannot find domain for host '$host'" >&2
            exit 1
        fi
    fi
}

main "$@"
